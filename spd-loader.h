/**
 * amalgamated header file containing function definitions to load
 * vector b and SPD vector A generated by the random SPD generator
 * 
 * @author Muhammad Rowaha
 */

#ifndef _SPD_LOADER_H
#define _SPD_LOADER_H

#include <stdio.h>
#include <stdlib.h>
#include "config.h"

// Loads a matrix of size n x n from a text file
double* load_matrix(int n) {
    FILE *file = fopen(matrix_file, "r");
    if (!file) {
        perror("Error opening matrix file");
        exit(EXIT_FAILURE);
    }

    double *matrix = (double *)malloc(n * n * sizeof(double));
    if (!matrix) {
        perror("Memory allocation failed for matrix");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < n * n; i++) {
        if (fscanf(file, "%lf", &matrix[i]) != 1) {
            fprintf(stderr, "Error reading matrix element at index %d\n", i);
            exit(EXIT_FAILURE);
        }
    }

    fclose(file);
    return matrix;
}

// Loads a vector of size n from a text file
double* load_vector(int n) {
    FILE *file = fopen(vector_file, "r");
    if (!file) {
        perror("Error opening vector file");
        exit(EXIT_FAILURE);
    }

    double *vector = (double*)malloc(n * sizeof(double));
    if (!vector) {
        perror("Memory allocation failed for vector");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < n; i++) {
        if (fscanf(file, "%lf", &vector[i]) != 1) {
            fprintf(stderr, "Error reading vector element at index %d\n", i);
            exit(EXIT_FAILURE);
        }
    }

    fclose(file);
    return vector;
}


#endif